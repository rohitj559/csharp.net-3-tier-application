Course Outline:

Identifying Classes - Identify classes from requirements, Building entity classes
Seperating Responsibilities - 
Establishing Relationaships
Leveraging Reuse - Building Reusable components, Understanding Interfaces
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
1. Identify classes from requirements:
----------------------------------------------------------------------------------
Intro

a> Requirements
b> Analyze the problem
c> Start with nouns
d> Define appropriate members
c> Classes

----------------------------------------------------------------------------------
Analyze the business problem

Manage business, residential, government and educator type of customers
Manage our products
Accept orders from customers online or through call center
----------------------------------------------------------------------------------
Start with the nouns

Manage business, residential, government and educator type of customers --> customer class
Manage our products --> product class
Accept orders from customers online or through call center - order class
----------------------------------------------------------------------------------
Define appropriate members

properties: data
methods: operations

Acme Customer Management System:

Customer:
Customer's name(Last Name, First Name),
Email Address,
Home and Work Address
---------------------
Validate(),
Retrieve(),
Save{}

Product:
Product Name,
Description,
Current Price
---------------------
Validate(),
Retrieve(),
Save{}

Order
Customer,
Order Date,
Shipping address,
Order items
---------------------
Validate(),
Retrieve(),
Save{}

Order Item
Product,
quantity
Purchase price
---------------------
Validate(),
Retrieve(),
Save{}
------------------------------------------------------------
Abstraction:
Abstracting away extreneous details and considering only relevant details

Encapsulation:
Technique to hide/encapsulate implementation details within a class.
properties are exposed through getters/setters and operations through methods.
Property getters/setters and methods define the class interface to the rest of the application.

-----------------------------------------------------------------------------------------------
Building Entity classes
-----------------------------------------------------------------------------------------------
Layering the application:

seperate layers for UI, BL and DL
UI ==> User Interfaces
BL ==> Business Logic Layer
DL ==> Data Access Layer
common ==> Utility/common layer with helper classes used through out the application 

- UI, BL, DL amd common layers represent seperate C# projects

- UI layer gets built as an exe
- BL, DL and common layers would be built as dlls
-----------------------------------------------------------------------------------------------
Building the business logic component:

create a seperate class library for business layer
-----------------------------------------------------------------------------------------------
Building a class: properties

create a private backing field ex: _lastName
crete a getter/setter property for the above backing field. Set its access level to public
If the property needs to be accessed within the class project(BL layer), set it to internal

crete an elaborated getter and setter properties if the backing property needs to undergo some validation or modification
else go for the default shortened getter/setter property. This doesnot create a backing field but internally it assumes one

property having only getter would be a readonly property
property having only setter would be a writeonly property
--------------------------------------------------------------------------------------------------------------------------
Using snippets:

edit - intellisense - insert snippet
or 
right click - Snippet - Insert Snippet
--------------------------------------------------------------------------------------------------
Testing the class:

We write unit tests for each property and method in the class
--------------------------------------------------------------------------------------------------
Testing the class: Valid values

within main solution, create a seperate folder for Tests.
Inside the Tests folder create a test project with appropriate Test folder path

Include BL class library project within refernces of the Test project
Use the BL component added in the refernces through Using statement
Rename the Test class filename appropriately

Use Arrange, Act and Assert structures within the test methods

Arrange - We set up for our tests and get the expected value
Act - Access the property or method we are testing and get the actual value
Assert - Compare Expected with Actual value and determine the test outcome

To perform test: 
Test - Windows - Test Explorer
Hit Run or right click and Run
--------------------------------------------------------------------------------------------------
Static Modifier:

If we want to create a property which has to be shared across all the instances of a type, we use a Static modifier.
--------------------------------------------------------------------------------------------------------------------
Terms:

Signature --> Includes Method name and arguments. Doesnot include return type
Overloading --> Same method name but different arguments
Contract --> 
right click - outlining - collapse to definition ==> we obtain all the properties and methods of the class
properties and methods with public access modifiers define the contract of the class, It is also called the Interface. 
These properties and methods should not be removed or the properties and method signatures should not be modified. However, additional 
properties and methods can be added.
right click - outlining - Toggle all outlining ==> Retrieve back all the definitions
--------------------------------------------------------------------------------------------------------------------------------------
Building the class: Constructors

Constructors are used to initilize the object
In many cases the properties of the object default to valid values
Constructor with no parameters ==> default constructor
Implicit default constructor is defined automatically
When there are overloaded constructors in the class, we need to explicitly define a default constructor. This is because an object cannot be created 
without passing parameter. An implicit default constructor wont be automatically created when there are overloaded constructors defined.
----------------------------------------------------------------------------------------------------------------------------------------------------
Building remaining classes:

using nullable types makes a distiction between properties having a value of 0 and null. Here 0 would be a valid value and null would be invalid.
DateTimeOffset - Tracks date, time and timezone.
----------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------
6. Seperating Responsibilities:
----------------------------------------------------------------------------------
Seperating Responsibilities: 
- minimizes coupling
- Maximizes cohesion
- Simplifies maintenance
- Improoves testability

Coupling -->
Each and every class could have code to retrieve and save data using the data access layer. This make the classes tightly coupled with the data access 
layer. We can reduce this coupling by extracting and seperating the retrieval and saving code into seperate classes.

Cohesion -->
How related everything is for the purpose of the class. 
If there are properties and methods in the class which are not related to the class, they need to be moved to other classes. Ex: Address property needs a lot of rework on itself like formatting. Customer and Order classes cannot take up this responsibility and so address functionalities need to be moved to sepearate class.
-----------------------------------------------------------------------------------------------------------------------------------------------------
Revisiting the class:
By convention, a class responsible for retrieving and saving data is called a repository class. That is putting code related to datastoe into its own class. This forms the essence of Repository pattern.
-----------------------------------------------------------------------------------------------------------------------------------------------------




















